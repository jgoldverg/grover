// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: grover_udp.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GroverServer_StartServer_FullMethodName = "/grover.GroverServer/StartServer"
	GroverServer_StopServer_FullMethodName  = "/grover.GroverServer/StopServer"
)

// GroverServerClient is the client API for GroverServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroverServerClient interface {
	StartServer(ctx context.Context, in *StartServerRequest, opts ...grpc.CallOption) (*StartServerResponse, error)
	StopServer(ctx context.Context, in *StopServerRequest, opts ...grpc.CallOption) (*StopServerResponse, error)
}

type groverServerClient struct {
	cc grpc.ClientConnInterface
}

func NewGroverServerClient(cc grpc.ClientConnInterface) GroverServerClient {
	return &groverServerClient{cc}
}

func (c *groverServerClient) StartServer(ctx context.Context, in *StartServerRequest, opts ...grpc.CallOption) (*StartServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartServerResponse)
	err := c.cc.Invoke(ctx, GroverServer_StartServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groverServerClient) StopServer(ctx context.Context, in *StopServerRequest, opts ...grpc.CallOption) (*StopServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopServerResponse)
	err := c.cc.Invoke(ctx, GroverServer_StopServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroverServerServer is the server API for GroverServer service.
// All implementations must embed UnimplementedGroverServerServer
// for forward compatibility.
type GroverServerServer interface {
	StartServer(context.Context, *StartServerRequest) (*StartServerResponse, error)
	StopServer(context.Context, *StopServerRequest) (*StopServerResponse, error)
	mustEmbedUnimplementedGroverServerServer()
}

// UnimplementedGroverServerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGroverServerServer struct{}

func (UnimplementedGroverServerServer) StartServer(context.Context, *StartServerRequest) (*StartServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartServer not implemented")
}
func (UnimplementedGroverServerServer) StopServer(context.Context, *StopServerRequest) (*StopServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopServer not implemented")
}
func (UnimplementedGroverServerServer) mustEmbedUnimplementedGroverServerServer() {}
func (UnimplementedGroverServerServer) testEmbeddedByValue()                      {}

// UnsafeGroverServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroverServerServer will
// result in compilation errors.
type UnsafeGroverServerServer interface {
	mustEmbedUnimplementedGroverServerServer()
}

func RegisterGroverServerServer(s grpc.ServiceRegistrar, srv GroverServerServer) {
	// If the following call pancis, it indicates UnimplementedGroverServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GroverServer_ServiceDesc, srv)
}

func _GroverServer_StartServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroverServerServer).StartServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroverServer_StartServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroverServerServer).StartServer(ctx, req.(*StartServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroverServer_StopServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroverServerServer).StopServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroverServer_StopServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroverServerServer).StopServer(ctx, req.(*StopServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroverServer_ServiceDesc is the grpc.ServiceDesc for GroverServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroverServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grover.GroverServer",
	HandlerType: (*GroverServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartServer",
			Handler:    _GroverServer_StartServer_Handler,
		},
		{
			MethodName: "StopServer",
			Handler:    _GroverServer_StopServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grover_udp.proto",
}
