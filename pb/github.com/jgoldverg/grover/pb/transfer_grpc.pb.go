// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: transfer.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileTransferService_ListDirectory_FullMethodName         = "/connector.FileTransferService/ListDirectory"
	FileTransferService_CreateDirectory_FullMethodName       = "/connector.FileTransferService/CreateDirectory"
	FileTransferService_DeleteFileOrDirectory_FullMethodName = "/connector.FileTransferService/DeleteFileOrDirectory"
	FileTransferService_RenameFileOrDirectory_FullMethodName = "/connector.FileTransferService/RenameFileOrDirectory"
	FileTransferService_ScatterDirectory_FullMethodName      = "/connector.FileTransferService/ScatterDirectory"
	FileTransferService_GatherDirectory_FullMethodName       = "/connector.FileTransferService/GatherDirectory"
	FileTransferService_CopyFile_FullMethodName              = "/connector.FileTransferService/CopyFile"
	FileTransferService_UploadFile_FullMethodName            = "/connector.FileTransferService/UploadFile"
	FileTransferService_DownloadFile_FullMethodName          = "/connector.FileTransferService/DownloadFile"
)

// FileTransferServiceClient is the client API for FileTransferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileTransferServiceClient interface {
	ListDirectory(ctx context.Context, in *ListDirectoryRequest, opts ...grpc.CallOption) (*ListDirectoryResponse, error)
	CreateDirectory(ctx context.Context, in *CreateDirectoryRequest, opts ...grpc.CallOption) (*CreateDirectoryResponse, error)
	DeleteFileOrDirectory(ctx context.Context, in *DeleteFileOrDirectoryRequest, opts ...grpc.CallOption) (*DeleteFileOrDirectoryResponse, error)
	RenameFileOrDirectory(ctx context.Context, in *RenameFileOrDirectoryRequest, opts ...grpc.CallOption) (*RenameFileOrDirectoryResponse, error)
	ScatterDirectory(ctx context.Context, in *ScatterDirectoryRequest, opts ...grpc.CallOption) (*ScatterDirectoryResponse, error)
	GatherDirectory(ctx context.Context, in *GatherDirectoryRequest, opts ...grpc.CallOption) (*GatherDirectoryResponse, error)
	CopyFile(ctx context.Context, in *CopyFileRequest, opts ...grpc.CallOption) (*CopyFileResponse, error)
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileDataPart, UploadFileStatus], error)
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadFileResponse], error)
}

type fileTransferServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileTransferServiceClient(cc grpc.ClientConnInterface) FileTransferServiceClient {
	return &fileTransferServiceClient{cc}
}

func (c *fileTransferServiceClient) ListDirectory(ctx context.Context, in *ListDirectoryRequest, opts ...grpc.CallOption) (*ListDirectoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDirectoryResponse)
	err := c.cc.Invoke(ctx, FileTransferService_ListDirectory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransferServiceClient) CreateDirectory(ctx context.Context, in *CreateDirectoryRequest, opts ...grpc.CallOption) (*CreateDirectoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDirectoryResponse)
	err := c.cc.Invoke(ctx, FileTransferService_CreateDirectory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransferServiceClient) DeleteFileOrDirectory(ctx context.Context, in *DeleteFileOrDirectoryRequest, opts ...grpc.CallOption) (*DeleteFileOrDirectoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFileOrDirectoryResponse)
	err := c.cc.Invoke(ctx, FileTransferService_DeleteFileOrDirectory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransferServiceClient) RenameFileOrDirectory(ctx context.Context, in *RenameFileOrDirectoryRequest, opts ...grpc.CallOption) (*RenameFileOrDirectoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RenameFileOrDirectoryResponse)
	err := c.cc.Invoke(ctx, FileTransferService_RenameFileOrDirectory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransferServiceClient) ScatterDirectory(ctx context.Context, in *ScatterDirectoryRequest, opts ...grpc.CallOption) (*ScatterDirectoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScatterDirectoryResponse)
	err := c.cc.Invoke(ctx, FileTransferService_ScatterDirectory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransferServiceClient) GatherDirectory(ctx context.Context, in *GatherDirectoryRequest, opts ...grpc.CallOption) (*GatherDirectoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GatherDirectoryResponse)
	err := c.cc.Invoke(ctx, FileTransferService_GatherDirectory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransferServiceClient) CopyFile(ctx context.Context, in *CopyFileRequest, opts ...grpc.CallOption) (*CopyFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CopyFileResponse)
	err := c.cc.Invoke(ctx, FileTransferService_CopyFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransferServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileDataPart, UploadFileStatus], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileTransferService_ServiceDesc.Streams[0], FileTransferService_UploadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileDataPart, UploadFileStatus]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileTransferService_UploadFileClient = grpc.ClientStreamingClient[FileDataPart, UploadFileStatus]

func (c *fileTransferServiceClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileTransferService_ServiceDesc.Streams[1], FileTransferService_DownloadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DownloadFileRequest, DownloadFileResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileTransferService_DownloadFileClient = grpc.ServerStreamingClient[DownloadFileResponse]

// FileTransferServiceServer is the server API for FileTransferService service.
// All implementations must embed UnimplementedFileTransferServiceServer
// for forward compatibility.
type FileTransferServiceServer interface {
	ListDirectory(context.Context, *ListDirectoryRequest) (*ListDirectoryResponse, error)
	CreateDirectory(context.Context, *CreateDirectoryRequest) (*CreateDirectoryResponse, error)
	DeleteFileOrDirectory(context.Context, *DeleteFileOrDirectoryRequest) (*DeleteFileOrDirectoryResponse, error)
	RenameFileOrDirectory(context.Context, *RenameFileOrDirectoryRequest) (*RenameFileOrDirectoryResponse, error)
	ScatterDirectory(context.Context, *ScatterDirectoryRequest) (*ScatterDirectoryResponse, error)
	GatherDirectory(context.Context, *GatherDirectoryRequest) (*GatherDirectoryResponse, error)
	CopyFile(context.Context, *CopyFileRequest) (*CopyFileResponse, error)
	UploadFile(grpc.ClientStreamingServer[FileDataPart, UploadFileStatus]) error
	DownloadFile(*DownloadFileRequest, grpc.ServerStreamingServer[DownloadFileResponse]) error
	mustEmbedUnimplementedFileTransferServiceServer()
}

// UnimplementedFileTransferServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileTransferServiceServer struct{}

func (UnimplementedFileTransferServiceServer) ListDirectory(context.Context, *ListDirectoryRequest) (*ListDirectoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDirectory not implemented")
}
func (UnimplementedFileTransferServiceServer) CreateDirectory(context.Context, *CreateDirectoryRequest) (*CreateDirectoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDirectory not implemented")
}
func (UnimplementedFileTransferServiceServer) DeleteFileOrDirectory(context.Context, *DeleteFileOrDirectoryRequest) (*DeleteFileOrDirectoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFileOrDirectory not implemented")
}
func (UnimplementedFileTransferServiceServer) RenameFileOrDirectory(context.Context, *RenameFileOrDirectoryRequest) (*RenameFileOrDirectoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameFileOrDirectory not implemented")
}
func (UnimplementedFileTransferServiceServer) ScatterDirectory(context.Context, *ScatterDirectoryRequest) (*ScatterDirectoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScatterDirectory not implemented")
}
func (UnimplementedFileTransferServiceServer) GatherDirectory(context.Context, *GatherDirectoryRequest) (*GatherDirectoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatherDirectory not implemented")
}
func (UnimplementedFileTransferServiceServer) CopyFile(context.Context, *CopyFileRequest) (*CopyFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyFile not implemented")
}
func (UnimplementedFileTransferServiceServer) UploadFile(grpc.ClientStreamingServer[FileDataPart, UploadFileStatus]) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedFileTransferServiceServer) DownloadFile(*DownloadFileRequest, grpc.ServerStreamingServer[DownloadFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedFileTransferServiceServer) mustEmbedUnimplementedFileTransferServiceServer() {}
func (UnimplementedFileTransferServiceServer) testEmbeddedByValue()                             {}

// UnsafeFileTransferServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileTransferServiceServer will
// result in compilation errors.
type UnsafeFileTransferServiceServer interface {
	mustEmbedUnimplementedFileTransferServiceServer()
}

func RegisterFileTransferServiceServer(s grpc.ServiceRegistrar, srv FileTransferServiceServer) {
	// If the following call pancis, it indicates UnimplementedFileTransferServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileTransferService_ServiceDesc, srv)
}

func _FileTransferService_ListDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServiceServer).ListDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileTransferService_ListDirectory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServiceServer).ListDirectory(ctx, req.(*ListDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTransferService_CreateDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServiceServer).CreateDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileTransferService_CreateDirectory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServiceServer).CreateDirectory(ctx, req.(*CreateDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTransferService_DeleteFileOrDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileOrDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServiceServer).DeleteFileOrDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileTransferService_DeleteFileOrDirectory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServiceServer).DeleteFileOrDirectory(ctx, req.(*DeleteFileOrDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTransferService_RenameFileOrDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameFileOrDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServiceServer).RenameFileOrDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileTransferService_RenameFileOrDirectory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServiceServer).RenameFileOrDirectory(ctx, req.(*RenameFileOrDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTransferService_ScatterDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScatterDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServiceServer).ScatterDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileTransferService_ScatterDirectory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServiceServer).ScatterDirectory(ctx, req.(*ScatterDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTransferService_GatherDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatherDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServiceServer).GatherDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileTransferService_GatherDirectory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServiceServer).GatherDirectory(ctx, req.(*GatherDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTransferService_CopyFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServiceServer).CopyFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileTransferService_CopyFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServiceServer).CopyFile(ctx, req.(*CopyFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTransferService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileTransferServiceServer).UploadFile(&grpc.GenericServerStream[FileDataPart, UploadFileStatus]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileTransferService_UploadFileServer = grpc.ClientStreamingServer[FileDataPart, UploadFileStatus]

func _FileTransferService_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileTransferServiceServer).DownloadFile(m, &grpc.GenericServerStream[DownloadFileRequest, DownloadFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileTransferService_DownloadFileServer = grpc.ServerStreamingServer[DownloadFileResponse]

// FileTransferService_ServiceDesc is the grpc.ServiceDesc for FileTransferService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileTransferService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "connector.FileTransferService",
	HandlerType: (*FileTransferServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDirectory",
			Handler:    _FileTransferService_ListDirectory_Handler,
		},
		{
			MethodName: "CreateDirectory",
			Handler:    _FileTransferService_CreateDirectory_Handler,
		},
		{
			MethodName: "DeleteFileOrDirectory",
			Handler:    _FileTransferService_DeleteFileOrDirectory_Handler,
		},
		{
			MethodName: "RenameFileOrDirectory",
			Handler:    _FileTransferService_RenameFileOrDirectory_Handler,
		},
		{
			MethodName: "ScatterDirectory",
			Handler:    _FileTransferService_ScatterDirectory_Handler,
		},
		{
			MethodName: "GatherDirectory",
			Handler:    _FileTransferService_GatherDirectory_Handler,
		},
		{
			MethodName: "CopyFile",
			Handler:    _FileTransferService_CopyFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _FileTransferService_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _FileTransferService_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "transfer.proto",
}
